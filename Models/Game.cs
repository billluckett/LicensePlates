//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LicensePlatesDBFirst.Models
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class Game
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Game()
        {
            this.GameCountries = new HashSet<GameCountry>();
            this.GamePlates = new HashSet<GamePlate>();
            var now = DateTime.Now;
            //this.Start = new DateTime(now.Year, now.Month, now.Day);
            //this.Stop = new DateTime(now.Year, now.Month, now.Day).AddSeconds(86399);
            this.Start = now.Subtract(now.TimeOfDay);
            this.Stop = this.Start.Add(new TimeSpan(23, 59, 59));
        }
    
        public int Id { get; set; }
        public System.DateTime Start { get; set; }
        public System.DateTime Stop { get; set; }
        public string Name { get; set; }
        public Nullable<int> UserId { get; set; }
    
        public virtual User User { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<GameCountry> GameCountries { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<GamePlate> GamePlates { get; set; }

        public int Score { get { return GetScore(); } }
        public int Possible { get { return GetPossible(); } }

        private LicensePlatesDBFirstEntities db = new LicensePlatesDBFirstEntities();

        private int GetScore()
        {
            var pids = GamePlates.Select(p => p.PlateId);
            var cids = GameCountries.Select(c => c.CountryId);
            return db.Plates.Where(p => pids.Contains(p.Id) && cids.Contains(p.CountryId)).Count();
        }

        private int GetPossible()
        {
            var cids = GameCountries.Select(c => c.CountryId);
            return db.Plates.Where(p => cids.Contains(p.CountryId)).Count();
        }
    }
}
